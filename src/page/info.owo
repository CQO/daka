<template lang="pug">
.info-page
  //- 头图
  img.main-image(src="@|top-bar.jpg|")
  .conn
    .card
      .title-bar
        h2
        h3 
      .info
      .progress-box
        .progress
    //- 用户展示
    .user-show.card
      span
      p.room-info
      p.message
    //- 设置挑战金额
    .join-card.card
      .title(font="FZLTCHJW.TTF") 可选挑战金额:
      .set-money
        span(o-tap="changeNumber(5)" o-class-active="this.data.joinMoney == 5") 5元
        span(o-tap="changeNumber(50)" o-class-active="this.data.joinMoney == 50") 50元
        span(o-tap="changeNumber(500)" o-class-active="this.data.joinMoney == 500") 500元
        span(o-tap="changeNumber(5000)" o-class-active="this.data.joinMoney == 5000") 5000元
    .join-card-red.card
      p 挑战金额：
      p 5元
    //- 参加按钮
    .join-button(o-tap="joinGame") 参与挑战
    .daka-button.captcha-button(data-appid="2002224224" data-cbfn="owo.script.info.dakaCallBack") 立即打卡
    //- 补签按钮
    .compensate-button(o-tap="compensate") 立即补签(1张补签卡)
    .no-button
    //- 今日打卡进度
    .other-people.card
      .other-title-bar
        h2(font="FZLTCHJW.TTF") 今日打卡战况
        span 
      ul
        li.fastest
          .left
            img(src="@|user.svg|")
            span 最早打卡
            .name
          .right
        li.money
          .left
            img(src="@|user.svg|")
            span(style=" background-color: darkgoldenrod;") 土豪之星
            .name
          .right
        li.last
          .left
            img(src="@|user.svg|")
            span(style=" background-color: chartreuse;") 最晚打卡
            .name
          .right
</template>

<script>
  module.exports = {
    data: {
      roomInfo: null,
      joinMoney: 5,
      roomName: '',
      dakaTime: ''
    },
    created: function () {
      // 注册腾讯验证按钮
      this.queryAll('.captcha-button').forEach(element => {
        new TencentCaptcha(element)
      })
    },
    show: function () {
      // 获取房间信息
      const roomID = _owo.getQueryVariable().id 
      getData(`getRoomInfo?roomID=${roomID}`, (infoData) => {
        // 清除之前页面的class
        this.$el.classList.remove('attended')
        this.$el.classList.remove('compensate')
        this.$el.classList.remove('not-started')
        this.$el.classList.remove('running')
        this.$el.classList.remove('is-close')
        this.$el.classList.remove('no-attended')
        this.$el.classList.remove('finish')
        this.$el.classList.remove('fail')
        this.$el.classList.remove('no-running')
        this.query('.other-people').style.display = 'none'
        this.query('.user-show').style.display = 'none'
        this.query('.join-card').style.display = 'none'
        this.query('.join-card-red').style.display = 'none'

        const data = infoData.roomInfo
        this.data.roomInfo = data
        const userList = infoData.userInfo
        
        if (data.finish === 1) {
          this.$el.classList.add('finish')
          // 如果游戏结束了那么标记房间结束
          if (userInfo) getData(`markRoom?roomID=${roomID}&token=${userInfo.token}&userID=${userInfo.id}`)
          // 处理打卡结束后的结算信息
          let noButtonText = '已结束'
          infoData.userInfo.forEach(element => {
            if (element.id === userInfo.id && element.income) {
              noButtonText = `分得${element.income}元`
            }
          })
          setTimeout(() => {
            this.query('.no-button').innerHTML = noButtonText
          }, 0);
        }
        // 打卡时间
        let dakaTime = JSON.parse(data.daka_time)
        this.data.roomName = data.name
        this.query('.title-bar h2').innerText = data.name
        this.query('.title-bar h3').innerHTML = `奖池金额 <span>${data.money}</span> 元`
        // 计算进度条进度
        this.query('.progress').style.width = (data.clock_days / data.avtive_days) * 100 + '%'
        this.data.dakaTime = `${getTimeStr(dakaTime[0])}-${getTimeStr(dakaTime[1])}`
        // 剩余几天
        const shengyu = (dayjs(data.start_day).diff() < 0 ? 0 : 1) + (data.avtive_days - data.clock_days)
        if (shengyu > 0) {
          if (dayjs(data.start_day).diff() < 0) {
            this.query('.info').innerHTML = `每天${getTimeStr(dakaTime[0])}-${getTimeStr(dakaTime[1])}打卡 [总天数${data.avtive_days}天/剩余${shengyu}天]`
          } else {
            this.query('.info').innerHTML = `每天${getTimeStr(dakaTime[0])}-${getTimeStr(dakaTime[1])}打卡 ${data.start_day}开始 共${data.avtive_days}天`
            this.query('.no-button').innerHTML = `${data.start_day} 正式开始`
            this.$el.classList.add('no-running')
          }
          
        } else if (shengyu == 0) {
          this.query('.info').innerHTML = `每天${getTimeStr(dakaTime[0])}-${getTimeStr(dakaTime[1])}打卡 [最后一天]`
        } else {
          this.query('.info').innerHTML = `每天${getTimeStr(dakaTime[0])}-${getTimeStr(dakaTime[1])}打卡`
          return
        }
        
        if (data.roomText) {
          this.query('.user-show .message').innerHTML = `房间宣言: ${data.roomText}`
        } else {
          this.query('.user-show .message').innerHTML = ''
        }
        this.query('.user-show .room-info').innerHTML = `<span>奖金分配模式: <span class="type">${data.type == 0 ? '按比例分配' : '随机分配'}</span></span> <span>房间佣金: ${data.bonus}%</span>`
        this.query('.user-show').style.display = 'block'
        // 判断是否为固定加入金额
        if (data.type != 0) {
          this.query('.join-card-red').innerHTML = `<span>挑战金额:</span><span>${data.type}元</span>`
          this.query('.join-card-red').style.display = 'flex'
          this.data.joinMoney = data.type
        } else {
          this.query('.join-card').style.display = 'block'
          this.data.joinMoney = 5
        }
        // 判断是否在挑战时间内
        var dateObj = new Date();
        const nowTime = dateObj.getHours() * 3600 + dateObj.getMinutes() * 60
        // 加20秒便于用户打卡
        if (dakaTime[0] < nowTime + 20 && nowTime < dakaTime[1]) {
          this.$el.classList.add('running')
        } else {
          // 判断是否为最后一天且超过打卡时间
          
          let lastDay = dayjs(data.start_day).add(data.avtive_days - 1, 'day')
          let isLastDay = lastDay.diff() < 0
          console.log(isLastDay)
          console.log(lastDay.valueOf(), dayjs().valueOf(), lastDay.valueOf()- dayjs().valueOf())
          if ((data.clock_days >= data.avtive_days) && isLastDay && nowTime > dakaTime[1]) {
            this.query('.no-button').innerHTML = `将在次日0点进行结算`
            this.$el.classList.add('is-close')
          } else {
            this.query('.no-button').innerHTML = `未到活动时间${getTimeStr(dakaTime[0])}-${getTimeStr(dakaTime[1])}`
            this.$el.classList.add('no-running')
          }
        }
        this.handUserInfo(userList)
      })
    },
    getClockInfo: function (userList) {
      let myInfo = null
      // 判断打卡成功失败人数
      let successNum = 0
      // 最先打卡者
      let fastestPeople = {clock_time: Infinity,}
      let moneyPeople = {money: 0,}
      let lastPeople = {clock_time: 0}
      // 遍历打卡人员
      userList.forEach(element => {
        if (userInfo && element.user_id == userInfo.id) {
          myInfo = element
        }
        if (element.state === 1) {
          if (element.clock_time && (element.clock_time < fastestPeople.clock_time)) {
            fastestPeople = element
          }
          if (element.clock_time && (element.clock_time > lastPeople.clock_time)) {
            lastPeople = element
          }
          if (element.money > moneyPeople.money) {
            moneyPeople = element
          }
          successNum++
        }
      })
      // 如果没有打卡成功的则不显示信息框
      if (successNum == 0) {
        return myInfo
      }

      // 最快的人
      this.query('.fastest .right').innerText = dayjs(parseInt(fastestPeople.clock_time)).format('HH:mm:ss') + '打卡'
      getData(`getUserShowInfo?userID=${fastestPeople.user_id}`, (data) => {
        if (!data) return myInfo
        if (data.image) this.query('.fastest img').src = data.image
        this.query('.fastest .name').innerText = data.username
      })
      // 投入最多的人
      this.query('.money .right').innerText = '挑战金额' + moneyPeople.money + '元'
      getData(`getUserShowInfo?userID=${moneyPeople.user_id}`, (data) => {
        if (!data) return myInfo
        this.query('.money .name').innerText = data.username
        if (data.image) this.query('.money img').src = data.image
      })
      // 最晚打卡的人
      this.query('.last .right').innerText = dayjs(parseInt(lastPeople.clock_time)).format('HH:mm:ss') + '打卡'
      getData(`getUserShowInfo?userID=${lastPeople.user_id}`, (data) => {
        if (!data) return myInfo
        if (data.image) this.query('.last img').src = data.image
        this.query('.last .name').innerText = data.username
      })
      this.query('.other-people').style.display = 'block';
      this.query('.other-title-bar span').innerHTML = `${successNum}/${userList.length}的参与者已打卡`
      return myInfo
    },
    handUserInfo: function (userList) {

      this.query('.user-show span').innerText = `当前有${userList.length}人参与打卡`
      // 判断是否加入
      if (userList.length > 0) {
        // 判断我是否登录
        let myInfo = this.getClockInfo(userList)
        // 判断我有没有参与
        if (myInfo !== null) {
          // console.log(myInfo)
          if (myInfo.state == 1) {
            console.log('已成功打卡!')
            this.query('.no-button').innerHTML = `已成功打卡!`
            this.$el.classList.add('not-started')
            this.query('.title-bar h2').innerText = this.query('.title-bar h2').innerText + `已经打卡`
          } else if (myInfo.state == 2) {
            console.log('可以补签!')
            this.$el.classList.add('compensate')
            this.query('.title-bar h2').innerText = this.query('.title-bar h2').innerText + `需要补签`
          } else {
            this.$el.classList.add('attended')
          }
          
        } else {
          this.$el.classList.add('no-attended')
        }
      } else {
        this.$el.classList.add('no-attended')
      }
    },
    joinGame: function () {
      if (!userInfo || !userInfo.token || !userInfo.id) {
        owo.tool.toast('您还未登录!')
        owo.go('login/view-loginContent=login/moveToLeft/moveFromRight//moveToRight/moveFromLeft')
        return
      }
      console.log(this.data.roomInfo)
      owo.script.propShow.showProp(`参与此项挑战您需要支付${this.data.joinMoney}元入场费，打卡挑战期数为${this.data.roomInfo.avtive_days}期，每1天为一期，打卡时间为${this.data.dakaTime}，挑战成功即可与其它胜利者瓜分奖池奖金，挑战成功人数越少您分得的奖金越多。`, () => {
        owo.script.propShow.hideProp()
        // owo.go('wallet', 'view-showbox=my')
        // owo.tool.toast('您的余额不足!')
        const roomID = _owo.getQueryVariable().id
        getData(`joinGame?roomID=${roomID}&token=${userInfo.token}&userID=${userInfo.id}&money=${this.data.joinMoney}&roomName=${this.data.roomName}`, (data) => {
          owo.tool.toast('参加挑战成功!')
          owo.script.info.show()
        })
      })
    },
    changeNumber: function (num) {
      this.data.joinMoney = parseInt(num)
      this.handleEvent(this, this.query('.set-money'))
    },
    dakaCallBack: function (res) {
      if (res.ret === 0) {
        // 获取房间信息
        const roomID = _owo.getQueryVariable().id
        console.log(res)
        getData(`/clockIn?ticket=${res.ticket}&randstr=${res.randstr}&token=${userInfo.token}&userID=${userInfo.id}&roomID=${roomID}&name=${owo.script.info.data.roomName}&userName=${userInfo.username}`, (data) => {
          owo.tool.toast('打卡成功!')
          owo.script.info.show()
        })
      }
    },
    compensate: function () {
      // 补签
      const roomID = _owo.getQueryVariable().id
      getData(`compensate?roomID=${roomID}&token=${userInfo.token}&userID=${userInfo.id}`, (data) => {
        owo.tool.toast('补签成功!')
        owo.script.info.show()
      })
    }
  }
</script>


<style lang="less">
.info-page {
  background-color: #f8f8f8;
  overflow: auto;
}
.conn {
  width: 100%;
  margin-top: -60px;
  z-index: 9;
  transform: translate3d(0,0,0);
}
.card {
  background-color: white;
  width: 90%;
  margin: 20px auto;
  border-radius: 10px;
  padding: 2vw;
  box-shadow: 1px 1px 5px #cacaca;
}
.main-image {
  width: 100%;
  display: block;
}
.title-bar {
  display: flex;
  justify-content: space-between;
  line-height: 30px;
  height: 30px;
  h2 {
    font-size: 16px;
    color: #333;
  }
  h3 {
    font-size: 12px;
    color: #888;
    font-weight: normal;
    span {
      color: gold;
      font-size: 20px;
      font-weight: bold;
      margin: 0 2px;
    }
  }
}
.info {
  font-size: 14px;
  color: #888;
  line-height: 24px;
}
.progress-box {
  height: 8px;
  background-color: bisque;
  margin: 10px 0;
  border-radius: 4px;
  overflow: hidden;
  .progress {
    height: 100%;
    width: 0%;
    transition: width 1s;
    background-color: #009fe9;
  }
}
.user-show {
  margin-top: 15px;
  font-size: 14px;
  line-height: 30px;
  color: coral;
  justify-content: space-between;
  align-items: center;
  p {
    color: #ccc;
    display: flex;
    justify-content: space-between;
  }
  .type {
    color: salmon;
  }
}
.user-image-box {
  display: flex;
  img {
    width: 25px;
    height: 25px;
    margin-left: -5px;
    display: block;
  }
}
.join-button {
  width: 70%;
  margin: 0 auto;
  text-align: center;
  background-color: orangered;
  border-radius: 25px;
  padding: 2px 0;
  margin-top: 20px;
  box-shadow: 1px 1px 4px #8c2809;
  font-size: 20px;
  line-height: 45px;
  color: white;
}
.daka-button, .compensate-button {
  width: 70%;
  margin: 0 auto;
  text-align: center;
  background-color: #009fe9;
  border-radius: 25px;
  padding: 2px 0;
  margin-top: 20px;
  box-shadow: 1px 1px 4px #4442bd;
  font-size: 20px;
  line-height: 45px;
  color: white;
  display: none;
}

.no-button {
  width: 70%;
  margin: 0 auto;
  text-align: center;
  background-color: #ccc;
  border-radius: 25px;
  padding: 2px 0;
  margin-top: 20px;
  box-shadow: 1px 1px 4px #79807b;
  font-size: 17px;
  line-height: 45px;
  color: #666;
  display: none;
}
.other-title-bar {
  display: flex;
  line-height: 30px;
  justify-content: space-between;
  h2 {
    font-size: 16px;
    font-weight: normal;
  }
  span {
    font-size: 12px;
    color: #888;
  }
}
.other-people {
  display: none;
  li:last-child {
    border-bottom: none;
  }
  li {
    display: flex;
    justify-content: space-between;
    height: 90px;
    align-items: center;
    border-bottom: 1px solid #ffe0e0;
  }
  .left {
    position: relative;
    width: 220px;
    height: 80px;
    img {
      width: 55px;
      position: absolute;
      top: 10px;
      left: 2px;
      margin: auto;
      border-radius: 25px;
    }
    span {
      position: absolute;
      background-color: cornflowerblue;
      color: white;
      font-size: 12px;
      padding: 1px 5px;
      border-radius: 14px;
      left: 1px;
      bottom: 2px;
      width: 50px;
      text-align: center;
      margin: auto;
    }
    .name {
      position: absolute;
      top: 0;
      bottom: 0;
      margin: auto;
      line-height: 40px;
      height: 40px;
      left: 75px;
      font-size: 18px;
    }
  }
  .right {
    color: #888;
  }
}
.join-card {
  .title {
    line-height: 30px;
  }
  span {
    background-color: #ccc;
    color: white;
    padding: 2px 12px;
    border-radius: 5px;
    margin-right: 5px;
    line-height: 26px;
    font-size: 16px;
  }
  .active {
    background-color: #009fe9;
  }
}
.join-card-red {
  display: none;
  justify-content: space-between;
  color: cornflowerblue;
}
</style>